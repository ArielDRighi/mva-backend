const fs = require('fs');
const path = require('path');
const glob = require('glob');

// Configuraci√≥n
const config = {
  appName: 'MVA Backend',
  basePath: 'http://localhost:3000',
  apiPrefix: '/api', // A√±adido prefijo de API
  srcPath: path.resolve(__dirname, '../../../src'),
  docsPath: path.resolve(__dirname, '../../../src/docs'),
  outputPath: path.resolve(
    __dirname,
    '../../../postman/mva-backend-collection.json',
  ),
  environmentPath: path.resolve(__dirname, '../../../postman/environment.json'),
};

// Funci√≥n principal para generar la colecci√≥n
async function generatePostmanCollection() {
  console.log('üîç Escaneando archivos de controladores...');

  // Asegurar que la carpeta postman existe
  const outputDir = path.dirname(config.outputPath);
  if (!fs.existsSync(outputDir)) {
    fs.mkdirSync(outputDir, { recursive: true });
  }

  // Encontrar todos los controladores
  const controllers = findControllers();
  console.log(
    `‚úÖ Se encontraron ${controllers.length} archivos de controladores.`,
  );

  // Analizar controladores para extraer endpoints
  const endpoints = extractEndpoints(controllers);
  console.log(`‚úÖ Se encontraron ${endpoints.length} endpoints.`);

  // Buscar ejemplos en la documentaci√≥n
  console.log('üîç Buscando ejemplos en la documentaci√≥n...');
  const docExamples = extractExamplesFromDocs();
  console.log(
    `‚úÖ Se encontraron ${Object.keys(docExamples).length} ejemplos en la documentaci√≥n.`,
  );

  // Generar colecci√≥n de Postman
  const collection = buildPostmanCollection(endpoints, docExamples);

  // Guardar archivo de colecci√≥n
  fs.writeFileSync(config.outputPath, JSON.stringify(collection, null, 2));
  console.log(`‚úÖ Colecci√≥n Postman guardada en ${config.outputPath}`);

  // Crear archivo de entorno
  createEnvironmentFile();

  console.log(
    '\nüìù Colecci√≥n generada con √©xito. Importe ambos archivos en la aplicaci√≥n Postman.',
  );
}

// Encontrar todos los archivos de controladores
function findControllers() {
  // Usamos una ruta relativa desde la ra√≠z del proyecto
  const pattern = 'src/**/*.controller.ts';
  return glob.sync(pattern);
}

// Extraer ejemplos de la documentaci√≥n
function extractExamplesFromDocs() {
  const examples = {};
  const docFiles = glob.sync(`${config.docsPath}/**/*.md`);

  docFiles.forEach((file) => {
    const content = fs.readFileSync(file, 'utf8');
    const filename = path.basename(file, '.md').toLowerCase();

    // Extraer ejemplos de c√≥digo JSON
    const jsonRegex = /```json\s*([\s\S]*?)\s*```/g;
    let match;

    while ((match = jsonRegex.exec(content)) !== null) {
      try {
        const jsonContent = match[1].trim();

        // Determinar si es un cuerpo de solicitud o respuesta
        const requestMatch = content
          .substring(Math.max(0, match.index - 500), match.index)
          .match(/POST|PUT|PATCH|DELETE.*?Content-Type: application\/json/);

        if (requestMatch) {
          // Determinar la ruta del endpoint
          const urlMatch = content
            .substring(Math.max(0, match.index - 500), match.index)
            .match(/\b(POST|PUT|PATCH|DELETE)\s+([^\s]+)/);

          if (urlMatch) {
            const method = urlMatch[1];
            let url = urlMatch[2].replace(/\/api\//, '/');

            // Estandarizar la ruta
            if (!url.startsWith('/')) {
              url = '/' + url;
            }

            // Crear clave √∫nica para el endpoint
            const key = `${method}:${url}`;

            // A√±adir el ejemplo
            if (!examples[key]) {
              examples[key] = {
                body: jsonContent,
                contentType: 'application/json',
              };
            }
          }
        }
      } catch (e) {
        // Ignorar JSON inv√°lido
        console.log(`‚ùå Error al parsear JSON en ${file}:`, e.message);
      }
    }

    // Tambi√©n buscar ejemplos HTTP completos
    const httpRegex = /```http\s*([\s\S]*?)\s*```/g;

    while ((match = httpRegex.exec(content)) !== null) {
      const httpContent = match[1].trim();
      const methodMatch = httpContent.match(
        /^(POST|PUT|PATCH|DELETE|GET)\s+([^\s]+)/,
      );

      if (methodMatch) {
        const method = methodMatch[1];
        let url = methodMatch[2].replace(/\/api\//, '/');

        // Estandarizar la ruta
        if (!url.startsWith('/')) {
          url = '/' + url;
        }

        // Extraer el cuerpo si existe
        const bodyMatch = httpContent.match(/\n\n([\s\S]+)$/);
        const body = bodyMatch ? bodyMatch[1].trim() : null;

        if (body) {
          const key = `${method}:${url}`;
          if (!examples[key]) {
            examples[key] = {
              body: body,
              contentType: httpContent.includes(
                'Content-Type: application/json',
              )
                ? 'application/json'
                : 'text/plain',
            };
          }
        }
      }
    }
  });

  return examples;
}

// Extraer informaci√≥n de endpoints de los controladores
function extractEndpoints(controllerFiles) {
  const endpoints = [];

  for (const filePath of controllerFiles) {
    const content = fs.readFileSync(filePath, 'utf8');
    const controllerName = path.basename(filePath, '.controller.ts');

    // Extraer ruta base del controlador
    const controllerPathMatch = content.match(
      /@Controller\(['"]([^'"]*)['"]\)/,
    );
    const controllerPath = controllerPathMatch ? controllerPathMatch[1] : '';

    // Verificar si el controlador tiene autenticaci√≥n
    const hasJwtGuard =
      content.includes('@UseGuards') && content.includes('JwtAuthGuard');

    // Buscar m√©todos con decoradores HTTP
    const httpMethodRegex =
      /@(Get|Post|Put|Delete|Patch)\(['"]?([^)]*?)['"]?\)/g;
    let match;

    while ((match = httpMethodRegex.exec(content)) !== null) {
      const httpMethod = match[1].toUpperCase();
      const methodPath = match[2].trim();

      // Buscar el nombre del m√©todo
      const methodNameMatch = content
        .substring(match.index)
        .match(/\)\s+(\w+)\(/);
      const methodName = methodNameMatch ? methodNameMatch[1] : 'unknown';

      // Determinar si el m√©todo tiene guardia espec√≠fica
      const methodText = content.substring(match.index, match.index + 500);
      const methodHasGuard =
        methodText.includes('@UseGuards') &&
        methodText.includes('JwtAuthGuard');

      // Extraer roles si est√°n definidos
      const rolesMatch = methodText.match(/@Roles\(([^)]+)\)/);
      const roles = rolesMatch
        ? rolesMatch[1]
            .split(',')
            .map((r) => r.trim().replace(/['"\s]/g, ''))
            .filter(Boolean)
        : [];

      // Construir ruta completa
      let fullPath = controllerPath;
      if (methodPath) {
        fullPath = `${controllerPath}/${methodPath}`.replace(/\/+/g, '/');
      }
      fullPath = `/${fullPath}`.replace(/\/+/g, '/');

      // Identificar par√°metros
      const paramsMatch = fullPath.match(/:[a-zA-Z0-9_]+/g) || [];
      const params = paramsMatch.map((p) => p.substring(1));

      endpoints.push({
        controller: controllerName,
        path: fullPath,
        method: httpMethod,
        handlerName: methodName,
        parameters: params,
        roles: roles.length > 0 ? roles : undefined,
        authRequired: hasJwtGuard || methodHasGuard,
      });
    }
  }

  return endpoints;
}

// Construir colecci√≥n de Postman
function buildPostmanCollection(endpoints, docExamples) {
  // Agrupar endpoints por controlador
  const controllerMap = {};

  endpoints.forEach((endpoint) => {
    if (!controllerMap[endpoint.controller]) {
      controllerMap[endpoint.controller] = [];
    }
    controllerMap[endpoint.controller].push(endpoint);
  });

  // Crear carpetas para cada controlador
  const folders = [];

  // Crear carpeta de autenticaci√≥n primero (para que aparezca al principio)
  const authItems = [];

  // A√±adir solicitud de login con script para almacenar el token
  authItems.push({
    name: 'Login (obtener token)',
    request: {
      method: 'POST',
      header: [
        {
          key: 'Content-Type',
          value: 'application/json',
          type: 'text',
        },
      ],
      url: {
        raw: '{{baseUrl}}/api/auth/login',
        host: ['{{baseUrl}}'],
        path: ['api', 'auth', 'login'],
      },
      body: {
        mode: 'raw',
        raw: JSON.stringify(
          {
            username: '{{adminEmail}}',
            password: '{{adminPassword}}',
          },
          null,
          2,
        ),
        options: {
          raw: {
            language: 'json',
          },
        },
      },
      description:
        'Inicia sesi√≥n y almacena autom√°ticamente el token JWT para uso en solicitudes posteriores',
    },
    event: [
      {
        listen: 'test',
        script: {
          exec: [
            'var jsonData = pm.response.json();',
            'if (jsonData && jsonData.access_token) {',
            '    pm.environment.set("token", jsonData.access_token);',
            '    console.log("Token JWT almacenado correctamente");',
            '    pm.test("Token JWT almacenado correctamente", function() {',
            '        pm.expect(jsonData.access_token).to.be.a("string");',
            '    });',
            '} else {',
            '    console.error("No se pudo obtener el token JWT");',
            '    pm.test("Error al obtener el token JWT", function() {',
            '        pm.expect(jsonData).to.have.property("access_token");',
            '    });',
            '}',
          ],
          type: 'text/javascript',
        },
      },
    ],
  });

  // A√±adir informaci√≥n de ayuda sobre autenticaci√≥n
  authItems.push({
    name: 'Informaci√≥n de autenticaci√≥n',
    request: {
      method: 'GET',
      header: [],
      url: {
        raw: '{{baseUrl}}/api',
        host: ['{{baseUrl}}'],
        path: ['api'],
      },
      description: `# C√≥mo funciona la autenticaci√≥n

1. Ejecuta la solicitud "Login (obtener token)" primero
2. Esto autom√°ticamente almacenar√° el token JWT en la variable de entorno "token"
3. Todas las solicitudes protegidas utilizar√°n esta variable

## Credenciales de prueba

- Email: {{adminEmail}}
- Password: {{adminPassword}}

> Si las credenciales no funcionan, actualiza las variables de entorno con credenciales v√°lidas.`,
    },
  });

  // Agregar la carpeta de autenticaci√≥n al inicio
  folders.unshift({
    name: 'üîê Autenticaci√≥n',
    description: 'Autenticaci√≥n y gesti√≥n de tokens JWT',
    item: authItems,
  });

  // Agregar el resto de las carpetas de controladores
  Object.entries(controllerMap).forEach(([controller, endpointList]) => {
    // Excluir las rutas de autenticaci√≥n que ya hemos a√±adido en la carpeta especial
    if (controller.toLowerCase() !== 'auth') {
      const requests = endpointList.map((endpoint) =>
        createPostmanRequest(endpoint, docExamples),
      );

      folders.push({
        name: formatControllerName(controller),
        item: requests,
        description: `Endpoints para ${controller}`,
      });
    }
  });

  // Crear colecci√≥n completa
  return {
    info: {
      name: `${config.appName} API`,
      schema:
        'https://schema.getpostman.com/json/collection/v2.1.0/collection.json',
      description: `Colecci√≥n generada autom√°ticamente para ${config.appName}`,
      _postman_id: generateUUID(),
    },
    item: folders,
    variable: [
      {
        key: 'baseUrl',
        value: config.basePath,
        type: 'string',
      },
      {
        key: 'token',
        value: 'tu-token-jwt-aqui',
        type: 'string',
      },
      {
        key: 'adminEmail',
        value: 'admin@example.com',
        type: 'string',
      },
      {
        key: 'adminPassword',
        value: 'password',
        type: 'string',
      },
    ],
    auth: {
      type: 'bearer',
      bearer: [
        {
          key: 'token',
          value: '{{token}}',
          type: 'string',
        },
      ],
    },
  };
}

// Crear una solicitud de Postman para un endpoint
function createPostmanRequest(endpoint, docExamples) {
  // Crear encabezados
  const headers = [
    {
      key: 'Content-Type',
      value: 'application/json',
      type: 'text',
    },
  ];

  // Agregar encabezado de autorizaci√≥n si es necesario
  if (endpoint.authRequired) {
    headers.push({
      key: 'Authorization',
      value: 'Bearer {{token}}',
      type: 'text',
    });
  }

  // Preparar URL y par√°metros de ruta
  let urlPath = endpoint.path;

  // Reemplazar par√°metros de ruta con variables Postman
  (endpoint.parameters || []).forEach((param) => {
    urlPath = urlPath.replace(`:${param}`, `{{${param}}}`);
  });

  // A√±adir el prefijo de API a la ruta
  const apiPath = `${config.apiPrefix}${urlPath}`;

  // Verificar si existe un ejemplo documentado para este endpoint
  const exampleKey = `${endpoint.method}:${endpoint.path}`;
  const docExample = docExamples[exampleKey];

  // Crear cuerpo de solicitud para m√©todos POST, PUT, PATCH
  let body;
  if (['POST', 'PUT', 'PATCH'].includes(endpoint.method)) {
    let rawBody = docExample ? docExample.body : generateRequestBody(endpoint);

    body = {
      mode: 'raw',
      raw: rawBody,
      options: {
        raw: {
          language:
            docExample && docExample.contentType === 'application/json'
              ? 'json'
              : 'text',
        },
      },
    };
  }

  // Construir solicitud completa
  return {
    name: `${endpoint.method} ${endpoint.path}`,
    request: {
      method: endpoint.method,
      header: headers,
      url: {
        raw: `{{baseUrl}}${apiPath}`,
        host: ['{{baseUrl}}'],
        path: apiPath.split('/').filter(Boolean),
      },
      description: `${endpoint.handlerName} - ${endpoint.method} ${endpoint.path}`,
      ...(body && { body }),
    },
    response: [],
  };
}

// Generar un cuerpo de solicitud de ejemplo basado en el endpoint
function generateRequestBody(endpoint) {
  const controllerName = endpoint.controller.toLowerCase();
  let exampleBody = {};

  // Generar un cuerpo diferente seg√∫n el controlador y el m√©todo
  if (controllerName.includes('auth')) {
    if (endpoint.path.includes('login')) {
      exampleBody = {
        username: 'usuario@ejemplo.com',
        password: 'contrase√±a',
      };
    } else if (endpoint.path.includes('register')) {
      exampleBody = {
        nombre: 'Nombre Usuario',
        email: 'usuario@ejemplo.com',
        password: 'contrase√±a',
        rol: 'USUARIO',
      };
    } else {
      exampleBody = {
        email: 'usuario@ejemplo.com',
      };
    }
  } else if (controllerName.includes('user')) {
    exampleBody = {
      nombre: 'Nombre Usuario',
      email: 'usuario@ejemplo.com',
      rol: 'USUARIO',
      estado: 'ACTIVO',
    };
  } else if (controllerName.includes('client')) {
    exampleBody = {
      nombre_empresa: 'Empresa Ejemplo',
      cuit: '30-12345678-9',
      direccion: 'Calle Ejemplo 123',
      telefono: '011-1234-5678',
      email: 'contacto@empresa.com',
      contacto_principal: 'Nombre Contacto',
    };
  } else if (controllerName.includes('service')) {
    exampleBody = {
      clienteId: 1,
      tipoServicio: 'TIPO_EJEMPLO',
      fechaServicio: '2025-05-10',
      ubicacion: 'Ubicaci√≥n Ejemplo',
      notas: 'Notas de ejemplo',
      estado: 'PENDIENTE',
    };
  } else if (controllerName.includes('employee')) {
    exampleBody = {
      nombre: 'Nombre Empleado',
      apellido: 'Apellido Empleado',
      documento: '12345678',
      telefono: '011-1234-5678',
      email: 'empleado@ejemplo.com',
      direccion: 'Direcci√≥n Ejemplo',
      fecha_nacimiento: '1990-01-01',
    };
  } else if (
    controllerName.includes('chemical') ||
    controllerName.includes('toilet')
  ) {
    exampleBody = {
      serial: 'CHT-12345',
      modelo: 'Modelo Ejemplo',
      estado: 'DISPONIBLE',
      ubicacion: 'Ubicaci√≥n Ejemplo',
    };
  } else if (controllerName.includes('vehicle')) {
    exampleBody = {
      placa: 'ABC123',
      marca: 'Marca Ejemplo',
      modelo: 'Modelo Ejemplo',
      anio: 2024,
      capacidadCarga: 1000,
      estado: 'DISPONIBLE',
    };
  } else if (controllerName.includes('maintenance')) {
    exampleBody = {
      fecha: '2025-05-10',
      descripcion: 'Descripci√≥n del mantenimiento',
      costo: 1000,
      tipo: 'TIPO_MANTENIMIENTO',
    };
  } else if (
    controllerName.includes('contractual') ||
    controllerName.includes('condition')
  ) {
    exampleBody = {
      clienteId: 1,
      tipo_de_contrato: 'TIPO_EJEMPLO',
      fecha_inicio: '2025-01-01',
      fecha_fin: '2025-12-31',
      monto: 10000,
      frecuencia_limpieza: 7,
    };
  } else {
    // Cuerpo gen√©rico para otros controladores
    exampleBody = {
      id: 1,
      nombre: 'Ejemplo',
      descripcion: 'Descripci√≥n de ejemplo',
      fecha: '2025-05-05',
    };
  }

  return JSON.stringify(exampleBody, null, 2);
}

// Crear archivo de entorno
function createEnvironmentFile() {
  const environment = {
    id: generateUUID(),
    name: 'MVA Backend Environment',
    values: [
      {
        key: 'baseUrl',
        value: config.basePath,
        type: 'string',
        enabled: true,
      },
      {
        key: 'token',
        value: '',
        type: 'string',
        enabled: true,
      },
      {
        key: 'adminEmail',
        value: 'admin@example.com',
        type: 'string',
        enabled: true,
      },
      {
        key: 'adminPassword',
        value: 'password',
        type: 'string',
        enabled: true,
      },
    ],
    _postman_variable_scope: 'environment',
  };

  fs.writeFileSync(
    config.environmentPath,
    JSON.stringify(environment, null, 2),
  );
  console.log(`‚úÖ Archivo de entorno guardado en ${config.environmentPath}`);
}

// Formatear nombre de controlador para la carpeta de Postman
function formatControllerName(controllerName) {
  return controllerName
    .replace(/Controller$/, '')
    .replace(/([a-z])([A-Z])/g, '$1 $2')
    .replace(/^./, (str) => str.toUpperCase());
}

// Generar UUID simple para IDs de Postman
function generateUUID() {
  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {
    const r = (Math.random() * 16) | 0;
    const v = c === 'x' ? r : (r & 0x3) | 0x8;
    return v.toString(16);
  });
}

// Ejecutar la funci√≥n principal
generatePostmanCollection().catch((error) => {
  console.error('‚ùå Error al generar la colecci√≥n:', error);
  process.exit(1);
});
